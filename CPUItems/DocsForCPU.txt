CPUs PC starts at addr FFF7 after that it jumps to the starting ADDR at ADDR 0xFFFE def 0x0000

in the Reset thing it resets the console and the curor pos in mem

Starts on ADDR FFF7

0901	]
FE04	STOI #01 &FE04

0900	]
FE00	STOI #00 &FE00

0900	]
FE01	STOI #00 &FE01

3500	UINT #00		for updating the cursor

2F00	]
0000	JUMP &0000

ADDR vectors
INT ADDR vector at 0xFF00 and 0xFF01
STARTING ADDR vector at 0xFFFE and 0xFFFF

MEM Layout
0x0000 - 0x00FF STACK 256
0x0100 - 0x01FF SOUND DATA ; WIP

0x1000 - 0x10FF COMPILER VAR 256

0x7100 - 0x7100 Sound Addr 1

0xFB00 - 0xFB00 SUB addr low 1
0xFB01 - 0xFB01 SUB addr high 1

0xFC00 - 0xFC00 Stack pointer 1

0xFE00 - 0xFE00 Cursor POS X 1
0xFE01 - 0xFE01 Cursor POS Y 1
0xFE02 - 0xFE02 Cursor Styles 1
0xFE03 - 0xFE03 Console BG color 1
0xFE04 - 0xFE04 Console Clear 1
0xFE05 - 0xFE05 Get Key 1

0xFF00 - 0xFF00 INT ADDR L 1
0xFF01 - 0xFF01 INT ADDR H 1

0xFFFE - 0xFFFF Reset vector 2

UINT Instrs
0x0	Update Cursor Pos
0x1 Get a Key on wait

Port
00
Text
	0x0
	LoadChar 
	0x1
	loadRAW
	0x2
	0x3
	*LookIndex
	0x4
	Inc Index
	0x5
	Display
	0x6
	Display at INDEX
	0x7
	Clear Screen
	0x8
	Clear Index
	0x9
	Dec Index
	0xa
	0xb
	0xc
	0xd
	0xf

10
KeyBoard
	0x0
	0x1
	0x2
	will try to get an key input
	0x3
	0x4
	0x5
	*will output the Key 
	0x6
	0x7
	0x8
	0x9
	0xa
	0xb
	0xc
	0xd
	0xf

20
Video
	0x0
	Starts the Video Console
	0x1
	SETPIXEL
	0x2
	LOADWORD
	0x3
	0x4
	0x5
	Display
	0x6
	0x7
	0x8
	0x9
	0xa
	0xb
	0xc
	0xd
	0xf
	Exits the video Console

30
Sound
	0x0
	Set voice (Input)
	0x1
	0x2
	Play Sound
	0x3
	0x4
	Play voice index (Input)
	0x5
	0x6
	0x7
	0x8
	0x9
	0xa
	0xb
	0xc
	0xd
	0xf
	Exits the video Console

E0
	Load the Input Reg with the C Reg
F0
	Load Output Reg in to the C Reg

REGS
A = 0x00
B = 0x01
C = 0x02
D = 0x03

ADDR types
ASB	| AIM	2 bytes			&XXXX
ZPa	| ZIM	1 byte + REG	&XX, %RR

FLAGS		  DIS
ZERO : 0	| is 1 if the last * instr was zero
TRUE : 1	| is 1 if the last CMP instr was the same
LESS : 2	| is 1 if the last CMP instr was less then
OVER : 3	| is 1 if the last * instr was over 255
INTS : 4	| is 1 if there is an INT
PLUS : 5	| is 1 if the last * instr was under 0
CARR : 6	| is 1 if the last * overflowed 255(0xFF)

Status Reg
RUNNING : 0;
KEYHERE : 1;