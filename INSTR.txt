0x00	HLTC	IMM8			HLT the Cpu
0x01	NOOP					NO OP
0x02	CALL	IMM16			CALL to a new and save the addr
0x03	RESR					REturns from SubRoutine
0x04	INBY	IMM8			loads a BYte INto the port to be exe
0x05	OUTB					loads the c reg using the OUTput Byte
0x06	MOVA	IMM8			MOVes A to a reg indexed by imm8
0x07	MOVB	IMM8			MOVES B to a reg indexed by imm8
0x08	MOVC					MOVes C to a 
0x09	STOI	IMM8 & IMM16	STOres an Imm8 into Ram using imm16
0x0A	PUHI	IMM8			PUsHes an Imm8 into the stack
0x0B	PUHR	IMM8			PUsHes an Reg indexed by imm8 into the stack
0x0C	PUHS	STRING IMM		PUsHes a String imm
0x0D	POPR	IMM8			POPs a value out of the stack and into a Reg indexed by imm8
0x0E	*LODA	IMM8			LOaD A with an imm8
0x0F	LOAA	IMM16			LOAD A with an Addr
0x10	STOA	IMM16			STOre A
0x11	DECR	IMM8			DEC Reg indexed by imm8
0x12	INCR	IMM8			INC Reg indexed by imm8
0x13	*CMPA	IMM8			CMP A
0x14	*LODB	IMM8			LOaD B with an imm8
0x15	LOAB	IMM16			LOAD B with an Addr
0x16	STOB	IMM16			STOre B
0x17	*CMPB	IMM8			CMP B
0x18	LODC	IMM8			LOaD C with an imm8
0x19	LOAC	IMM16			LOAD C with an Addr
0x1A	STOC	IMM16			STOre C
0x1B	*CMPC	IMM8			CMP C
0x1C	*LODD	IMM8			LOaD D with an imm8
0x1D	LOAD	IMM16			LOAD D with an Addr
0x1E	STOD	IMM16			STOre D
0x1F	*CMPD	IMM8			CMP D
0x20	*ADDI	IMM8			ADD Imm8
0x21	*SUBI	IMM8			SUB Imm8
0x22	*ADDR	IMM8			ADD Reg indexed by imm8
0x23	*SUBR	IMM8			SUB Reg indexed by imm8
0x24	*CMPF	IMM8			CMP Flags	
0x25	*ANDI	IMM8			AND Imm8
0x26	*NOTI	IMM8			NOT Imm8
0x27	*ORIM	IMM8			OR IMm8
0x28	*NORI	IMM8			NOR Imm8
0x29	*ANDR	IMM8			AND Reg	indexed by imm8			
0x2A	*NOTR	IMM8			NOT Reg indexed by imm8
0x2B	*ORRE	IMM8			OR REg indexed by imm8
0x2C	*NORR	IMM8			NOR Reg indexed by imm8
0x2D	MOBA					Moves the BAnk
0x2E	*INTA	IMM16			INT Addr
0x2F	JUMP	IMM16			JUMP to an addr
0x30	JINZ	IMM16			Jump If Not Zero
0x31	JINT	IMM16			Jump If Not True
0x32	JIFT	IMM16			Jump IF True
0x33	*INTR					INT to the Reged addr
0x34	*REIN					REturn for INt
0x35	*UINT	IMM8			Update INT
0x36	ROLR	IMM8			ROtate Reg Left
0x37	RORR	IMM8			ROtate Reg Right
0x38	JIFC	IMM16			Jump IF Carry
0x39	JINO	IMM16			Jump If Not OverFlow
0x3A	GROM	IMM16			Get ROM
0x3B	LSLR	IMM8			Logical shift Reg Right
0x3C	LSRR	IMM8			Logical shift Reg Left
0x3D	LODF	IMM8			LOaD Flags
0x3E	LOBS	IMM8			LOad dataBuS
0x3F	LOAR	IMM16			LOad AddRbus
0x40	LOGC					LOG Cpu
0x41
0x42
0x43
0x44
0x45
0x46
0x47
0x48
0x49
0x4A
0x4B
0x4C
0x4D
0x4E
0x4F
0x50
0x51
0x52
0x53
0x54
0x55
0x56
0x57
0x58
0x59
0x5A
0x5B
0x5C
0x5D
0x5E
0x5F
0x60
0x61
0x62
0x63
0x64
0x65
0x66
0x67
0x68
0x69
0x6A
0x6B
0x6C
0x6D
0x6E
0x6F
0x70
0x71
0x72
0x73
0x74
0x75
0x76
0x77
0x78
0x79
0x7A
0x7B
0x7C
0x7D
0x7E
0x7F
0x80
0x81
0x82
0x83
0x84
0x85
0x86
0x87
0x88
0x89
0x8A
0x8B
0x8C
0x8D
0x8E
0x8F
0x90
0x91
0x92
0x93
0x94
0x95
0x96
0x97
0x98
0x99
0x9A
0x9B
0x9C
0x9D
0x9E
0x9F
0xA0
0xA1
0xA2
0xA3
0xA4
0xA5
0xA6
0xA7
0xA8
0xA9
0xAA
0xAB
0xAC
0xAD
0xAE
0xAF
0xB0
0xB1
0xB2
0xB3
0xB4
0xB5
0xB6
0xB7
0xB8
0xB9
0xBA
0xBB
0xBC
0xBD
0xBE
0xBF
0xC0
0xC1
0xC2
0xC3
0xC4
0xC5
0xC6
0xC7
0xC8
0xC9
0xCA
0xCB
0xCC
0xCD
0xCE
0xCF
0xD0
0xD1
0xD2
0xD3
0xD4
0xD5
0xD6
0xD7
0xD8
0xD9
0xDA
0xDB
0xDC
0xDD
0xDE
0xDF
0xE0
0xE1
0xE2
0xE3
0xE4
0xE5
0xE6
0xE7
0xE8
0xE9
0xEA
0xEB
0xEC
0xED
0xEE
0xEF
0xF0
0xF1
0xF2
0xF3
0xF4
0xF5
0xF6
0xF7
0xF8
0xF9
0xFA
0xFB
0xFC
0xFD
0xFE
0xFF