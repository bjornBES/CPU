.ORG &0000
!CURSORX &FE00
!CURSORY &FE01
!ADDRL &FB00
!ADDRH &FB01
!CLEAR &FE04

RESET:
	STOI &FE05
	STOI #01 CLEAR
	LODA #00
	INBY 0b00001000
	LODC '\'
	CALL PRINT_CHAR
	INBY #08
	CALL SET_TEXT
	STOI #00 &FC00
	STOI #00 &FF00
	STOI #00 &FF01
	JUMP UPDATE

PRINT_CHAR:
	INBY #E0
	INBY #00
	INBY #06
	RESR
PRINT_RAW:
	INBY #E0
	INBY #01
	INBY #06
	RESR
PRINT_RAW_HEX:
	INBY #E0
	INBY #01
	CALL TOHEX
	INBY #06
	RESR

PRINT_STRING:
	CMPA #00
	POPR #02
	INBY #00
	DECR #00
	JINZ PRINT_STRING
	INBY #05
	RESR

UPDATE:
	STOI #00 CURSORX
	STOI #01 CURSORY
UPDATE_LOOP:
	UINT #00
	CALL GETKEY
	JUMP UPDATE_LOOP

GETKEY:
	INBY #12
	INBY #15
	OUTB 

	CMPC ESC
	JIFT RESET

	CMPC #0A
	JIFT ENTER

	CMPC #26
	JIFT BACKSPACE

	CMPC #2E
	JIFT EXIT

	STOC &02,%A
	INCR #00
	INBY #04
	CALL LOAD_CURSOR_POS
	RESR

EXIT:
	HLTC

BACKSPACE:
	LODB #01
	CMPA #00
	JIFT RETURN_BACK

	DECR #00
	CALL SET_TEXT
	INBY #09
	LODC ' '
	CALL PRINT_CHAR
	CALL SET_TEXT
	CALL LOAD_CURSOR_POS
RETURN_BACK:
	RESR

ENTER:
	CMPA #00
	JIFT RETURN_ENTER

; IN MEM
	DECR #00
	LOAD &02,%A
	DECR #00
	LOAB &02,%A
	STOD 
	STOB

	MOBA
; IN ROM
	GROM %B,%D

	LOAC ADDRL
	CALL PRINT_RAW_HEX
	LOAC ADDRH
	CALL PRINT_RAW_HEX

	MOBA

RETURN_ENTER:
	RESR

LOAD_CURSOR_POS:
	STOA CURSORX
	STOB CURSORY
	RESR

TOHEX:
	PUHR #02
	LODC #01
	INBY #E0
	POPR #02
	RESR

SET_TEXT:
	STOI #00 CURSORX
	STOI #01 CURSORY
	UINT #00
	RESR

.ORG &1030
.rword &1100

.ORG &FF00
.word &1100

.ORG &FFFE
.word RESET